openapi: 3.0.0
info:
  title: wiq_en1b API
  description: Our project's OpenAPI specification.
  version: 0.1.2
  contact:
    name: Project github
    url: https://github.com/Arquisoft/wiq_en1b
servers:
  - url: http://localhost:8000
    description: Development server
    - url: http://wiqen1b.serveminecraft.net:8000
    description: Production server
paths:
  /health:
      get:
        summary: Check the health status of the service.
        operationId: checkHealth
        responses:
          '200':
            description: Service is healthy.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Health status.
                      example: OK
  /adduser:
    post:
      summary: Add a new user to the database.
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User ID.
                  example: student
                password:
                  type: string
                  description: User password.
                  example: pass
      responses:
        '200':
          description: User added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/LoginResponse'                                      
        '400':
          description: Failed to add user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: Username already in use
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: Internal Server Error
  /login:
    post:
      summary: Log in to the system.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: UserID.
                  example: student
                password:
                  type: string
                  description: Userpassword.
                  example: pass
      responses:
        '200':
          description: Login successful. Returns user token, username and email.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/LoginResponse'
        '400':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
  /questions:
    get:
      summary: Get 5 random questions from the system in any language
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'     
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'       
  /questions/{lang}:
    get:
      summary: Get 5 random questions from the system in the lang specified
      parameters:
        - name: lang
          in: path
          required: true
          schema:
            type: string
            enum: [es, en, tr]
          description: Language code for filtering questions
      security:
        - BearerAuth: []    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Wrong values given.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
  /questions/{lang}/{amount}:
    get:
      summary: Get an amount of random questions from the system in the lang specified
      parameters:
        - name: lang
          in: path
          required: true
          schema:
            type: string
            enum: [es, en, tr]
          description: Language code for filtering questions
        - name: amount
          in: path
          required: true
          schema:
            type: integer
            minimun: 1
            maximun: 20
          description: Amount of questions retrieved
      security:
        - BearerAuth: []    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Wrong values given.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
  /questions/{lang}/{amount}/{type}:
    get:
      summary: Get an amount of questions of the given type from the system in the lang specified
      parameters:
        - name: lang
          in: path
          required: true
          schema:
            type: string
            enum: [es, en, tr]
          description: Language code for filtering questions
        - name: amount
          in: path
          required: true
          schema:
            type: integer
            minimun: 1
            maximun: 20
          description: Amount of questions retrieved
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [POPULATION, CAPITAL, LANGUAGE, SIZE]
          description: Type for filtering questions
      security:
        - BearerAuth: []    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Wrong values given.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
  /record: 
    post:
      summary: Add a new record to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
  /record/{user}:
    get:
      summary: Gets the records from a given user
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
          description: Username for filtering records
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordResponse'
        '400':
          description: Wrong values given.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
  /record/ranking/top10:
    get:
      summary: Gets the top 10 users on the system
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Top10Ranking'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
  /record/ranking/{user}:
    get:
      summary: Gets the ranking information of the given user
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
          description: username of the user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRanking'
        '400':
          description: Wrong values given.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/shcemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
        email:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
      required:
        - username
        - email
    UserResponse:
      type: object
      properties:
        message:
          type: string
    QuestionResponse:
      type: array
      items:
        type: object
        properties:
          question:
            type: string
          answers:
            type: array
            items:
              type: string
          correct_answer:
            type: string
    Record:
      type: object
      properties:
        user:
          type: string
        game:
          type: object
          properties:
            questions:
              type: array
              items:
                type: object
                properties:
                  question:
                    type: string
                    example: What is the capital of Oviedo?
                  answers:
                    type: array
                    items:
                      type: string
                  answerGiven:
                    type: string
                  correctAnswer:
                    type: string
            points:
              type: integer
            date:
              type: string
      required:
        - user
        - game
    RecordResponse:
      type: object
      properties:
        user:
          type: string
        games:
          type: array
          items:
            type: object
            properties:
              questions:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                      example: What is the capital of Oviedo?
                    answers:
                      type: array
                      items:
                        type: string
                    answerGiven:
                      type: string
                    correctAnswer:
                      type: string
              points:
                type: integer
              date:
                type: string
    Error:
      type: object
      properties:
        error:
          type: string
    UserRanking:
      type: object
      properties:
        _id:
          type: string
        totalPoints:
          type: integer
        totalCompetitiveGames:
          type: integer
        position:
          type: integer 
    Top10Ranking:
      type: array
      items: 
        $ref: '#/components/schemas/UserRanking'